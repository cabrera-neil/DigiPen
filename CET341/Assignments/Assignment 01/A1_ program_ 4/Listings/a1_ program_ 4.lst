


ARM Macro Assembler    Page 1 


    1 00000000         ; Assignment 1 File
    2 00000000         ; Assembly File for Question 12d
    3 00000000         ; Title: Odd_Event_Sort Implementation
    4 00000000         ; Date: 13-Sep 2019
    5 00000000         ; Author: Neil Cabrera
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY
    8 00000000                 EXPORT           odd_even_sort
    9 00000000         
   10 00000000         odd_even_sort
                               PROC
   11 00000000         ; Parameters are received from R0 and R1
   12 00000000         ; R0 contains address of array
   13 00000000         ; R1 contains size of array
   14 00000000         
   15 00000000         ; Start looping into the array
   16 00000000         ; R4 will be the current index of the array
   17 00000000 F04F 0400       MOV              R4, #0
   18 00000004         
   19 00000004         loop
   20 00000004 428C            CMP              R4, R1
   21 00000006 DA22            BGE              exit
   22 00000008         
   23 00000008         ; Check if current index is odd or even
   24 00000008 F014 0F01       TST              R4, #1
   25 0000000C D102            BNE              even
   26 0000000E         ; Initiate inner loop index
   27 0000000E         ; If odd, start count is 2
   28 0000000E         ; If even, start count is 1
   29 0000000E         odd
   30 0000000E F04F 0602       MOV              R6, #2
   31 00000012 E001            B                odd_even_loop
   32 00000014         even
   33 00000014 F04F 0601       MOV              R6, #1
   34 00000018         
   35 00000018         odd_even_loop
   36 00000018 428E            CMP              R6, R1
   37 0000001A DA15            BGE              inc_loop
   38 0000001C         
   39 0000001C         ; Prepare offset in r9 and r10
   40 0000001C EA4F 0986       MOV              R9, R6, LSL#2
   41 00000020 F1A9 0A04       SUB              R10, R9, #4
   42 00000024         
   43 00000024         ; Load values based on the offset
   44 00000024 F850 7009       LDR              R7, [R0, R9]
   45 00000028 F850 800A       LDR              R8, [R0, R10]
   46 0000002C         
   47 0000002C 4547            CMP              R7, R8
   48 0000002E DA08            BGE              inc_odd_even
   49 00000030         
   50 00000030         ; Preserve everything
   51 00000030 E92D 47FF       PUSH             {R0, R1, R2, R3, R4, R5, R6, R7
, R8, R9, R10, LR}
   52 00000034         
   53 00000034         ; Prepare parameters for swap function
   54 00000034         ; Pass the address with offset
   55 00000034 EB00 010A       ADD              R1, R0, R10
   56 00000038 4448            ADD              R0, R0, R9
   57 0000003A F7FF FFFE       BL               swap



ARM Macro Assembler    Page 2 


   58 0000003E         
   59 0000003E         ; Recover everything
   60 0000003E E8BD 47FF       POP              {R0, R1, R2, R3, R4, R5, R6, R7
, R8, R9, R10, LR}
   61 00000042         
   62 00000042         inc_odd_even
   63 00000042 F106 0602       ADD              R6, R6, #2
   64 00000046 E7E7            B                odd_even_loop
   65 00000048         
   66 00000048         inc_loop
   67 00000048         ; Increment by 1
   68 00000048 F104 0401       ADD              R4, R4, #1
   69 0000004C E7DA            B                loop
   70 0000004E         
   71 0000004E         exit
   72 0000004E 4770            BX               LR
   73 00000050         
   74 00000050                 ENDP
   75 00000050         
   76 00000050         swap    PROC
   77 00000050         ; Parameters are received from R0 and R1
   78 00000050         ; Both parameters are pointers
   79 00000050         
   80 00000050         ; perform swap
   81 00000050 6802            LDR              R2, [R0]
   82 00000052 680B            LDR              R3, [R1]
   83 00000054 600A            STR              R2, [R1]
   84 00000056 6003            STR              R3, [R0]
   85 00000058         
   86 00000058 4770            BX               LR
   87 0000005A         
   88 0000005A                 ENDP
   89 0000005A         
   90 0000005A                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7.fp.sp --apcs=
interwork --depend=".\objects\a1_ program_ 4.d" -o".\objects\a1_ program_ 4.o" 
-I.\RTE\_Target_1 -IC:\Users\cabre\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSI
S\Core\Include -IC:\Users\cabre\AppData\Local\Arm\Packs\Keil\STM32F7xx_DFP\2.12
.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include --predefine="__EVAL SETA 1" --pred
efine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="STM3
2F746xx SETA 1" --list=.\listings\a1_ program_ 4.lst "A1_ program_ 4.s"



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file A1_
   Uses
      None
Comment: .text unused
even 00000014

Symbol: even
   Definitions
      At line 32 in file A1_
   Uses
      At line 25 in file A1_
Comment: even used once
exit 0000004E

Symbol: exit
   Definitions
      At line 71 in file A1_
   Uses
      At line 21 in file A1_
Comment: exit used once
inc_loop 00000048

Symbol: inc_loop
   Definitions
      At line 66 in file A1_
   Uses
      At line 37 in file A1_
Comment: inc_loop used once
inc_odd_even 00000042

Symbol: inc_odd_even
   Definitions
      At line 62 in file A1_
   Uses
      At line 48 in file A1_
Comment: inc_odd_even used once
loop 00000004

Symbol: loop
   Definitions
      At line 19 in file A1_
   Uses
      At line 69 in file A1_
Comment: loop used once
odd 0000000E

Symbol: odd
   Definitions
      At line 29 in file A1_
   Uses
      None
Comment: odd unused
odd_even_loop 00000018

Symbol: odd_even_loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 35 in file A1_
   Uses
      At line 31 in file A1_
      At line 64 in file A1_

odd_even_sort 00000000

Symbol: odd_even_sort
   Definitions
      At line 10 in file A1_
   Uses
      At line 8 in file A1_
Comment: odd_even_sort used once
swap 00000050

Symbol: swap
   Definitions
      At line 76 in file A1_
   Uses
      At line 57 in file A1_
Comment: swap used once
10 symbols
345 symbols in table
