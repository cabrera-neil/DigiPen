


ARM Macro Assembler    Page 1 


    1 00000000         ; Due Date: 01-Aug 2019
    2 00000000         ; Student Name: Neil Cabrera
    3 00000000         ; Student DigiPen Email Address: cabrera.n@digipen.edu
    4 00000000         ; Section:
    5 00000000         ; ? 2019 DigiPen, All Rights Reserved.
    6 00000000         
    7 00000000         ; Assembly Directive Reference
    8 00000000         ; http://www.keil.com/support/man/docs/armasm/armasm_dom
                       l361290000455.htm
    9 00000000         ; Area of data named "MyData" that is Read/Write
   10 00000000                 AREA             MyData, DATA, READWRITE
   11 00000000         
   12 00000000 00000005 
                       value1  EQU              0x05        ; The label value1 
                                                            equates to the hexa
                                                            decimal literal 0x0
                                                            5
   13 00000000         ; EQU gives a symbolic meaning to a numeric constant
   14 00000000 00 00 00 
              00       value2  SPACE            4           ; The label value2 
                                                            is a "space" of zer
                                                            oed data of size 4;
                                                            
   15 00000004         ; It defines 4 bytes of zeroed store
   16 00000004         
   17 00000004                 GLOBAL           __main      ; Global Main Funct
                                                            ion
   18 00000004                 AREA             Main, CODE, READONLY ; Area of 
                                                            Code named "Main" t
                                                            hat is read-only
   19 00000000                 ALIGN            2           ; Align the data bo
                                                            undary to a multipl
                                                            e of 2
   20 00000000                 ENTRY                        ; Entry into the co
                                                            de segment
   21 00000000         
   22 00000000         ; Assembly Directive Reference
   23 00000000         ; http://www.keil.com/support/man/docs/armasm/armasm_dom
                       l361290000455.htm
   24 00000000         __main
   25 00000000 4807            LDR              R0, =value2 ; Load "address" va
                                                            lue2 into Register 
                                                            R0
   26 00000002 6001            STR              R1, [R0]    ; Store the value i
                                                            n Register R1 into 
                                                            the "address" of Re
                                                            gister R0
   27 00000004 F04F 010A       MOV              R1, #2_1010 ; Move the literal 
                                                            (binary) 10 (ten) i
                                                            nto Register R1
   28 00000008 F04F 0005       MOV              R0, #value1 ; Move value1 into 
                                                            Register R0
   29 0000000C B500            PUSH             {LR}        ; Push the Link Reg
                                                            ister onto the Stac
                                                            k to save its value
                                                            
   30 0000000E F000 F803       BL               __add_register ; Branch WITH li
                                                            nk to the label "__
                                                            add_register"



ARM Macro Assembler    Page 2 


   31 00000012         ; Saves the next instruction's address in the Link Regis
                       ter
   32 00000012 F85D EB04       POP              {LR}        ; Pop the Old Link 
                                                            Register value off 
                                                            the stack back into
                                                             the Link Register
   33 00000016         
   34 00000016         ; Infinitely loop when we're done
   35 00000016         __loop
   36 00000016 E7FE            B                __loop      ; Branch to the lab
                                                            el __loop
   37 00000018         
   38 00000018         ; Registers Used:
   39 00000018         ; R0 - Left Operand
   40 00000018         ; R1 - Right Operand
   41 00000018         ; R2 - Result
   42 00000018         
   43 00000018         __add_register                       ; "Function" label 
                                                            __add_register
   44 00000018         ; Add the values "passed in" through R0 and R1
   45 00000018 EB00 0201       ADD              R2, R0, R1  ; R2 = R0 + R1
   46 0000001C         ; Use the Link Address to Return
   47 0000001C 46F7            MOV              PC, LR      ; MOV BX, LR is pre
                                                            ferred over this tr
                                                            aditional method
   48 0000001E BF00            NOP                          ; No Operation, use
                                                             NOP for padding be
                                                            fore END to avoid w
                                                            arning A1581W
   49 00000020                 END                          ; End of File
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\test.d -o.\objects\test.o -I.\RTE\_Target_1 -IC:\Users\c
abre\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\cabr
e\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM4\Include --predefine
="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SE
TA 1" --predefine="ARMCM4 SETA 1" --list=.\listings\test.lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 10 in file test.s
   Uses
      None
Comment: MyData unused
value2 00000000

Symbol: value2
   Definitions
      At line 14 in file test.s
   Uses
      At line 25 in file test.s
Comment: value2 used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Main 00000000

Symbol: Main
   Definitions
      At line 18 in file test.s
   Uses
      None
Comment: Main unused
__add_register 00000018

Symbol: __add_register
   Definitions
      At line 43 in file test.s
   Uses
      At line 30 in file test.s
Comment: __add_register used once
__loop 00000016

Symbol: __loop
   Definitions
      At line 35 in file test.s
   Uses
      At line 36 in file test.s
Comment: __loop used once
__main 00000000

Symbol: __main
   Definitions
      At line 24 in file test.s
   Uses
      At line 17 in file test.s
Comment: __main used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

value1 00000005

Symbol: value1
   Definitions
      At line 12 in file test.s
   Uses
      At line 28 in file test.s
Comment: value1 used once
1 symbol
343 symbols in table
